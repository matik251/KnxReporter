@page "/addxml"
@using Tewr.Blazor.FileReader;
@using System.IO;
@using System.Xml;
@using Models;
@using System.Collections.Concurrent;
@using System.Text;
@using System.Text.RegularExpressions;
@using Newtonsoft.Json;
@using System.IO;
@using Microsoft.AspNetCore.Hosting;

@inject IFileReaderService fileReaderService;
@inject NavigationManager NavigationManager;
@inject HttpClient http;


<h1>Add .xml file with KNX Telegrams</h1>

<div>
    <div class="dropArea @dropClass">
        <div class="centerElements">
            <div class="center">
                <img src="/Images/file_copy-black-18dp.svg" width="200" height="100" />
            </div>
            <br />
            <p class="text-center">Drag and drop xml here or click to open file dialogue</p>
        </div>
        <InputFile id="inputDrop"
                   OnChange="OnInputFileChange"
                   @ondragenter="HandleDragEnter"
                   @ondragleave="HandleDragLeave"
                   multiple />
    </div>
    <div class="invisible">
        <InputFile id="inputDefault"
                   OnChange="OnInputFileChange"
                   accept="xml" />
    </div>
    @if (files != null && files.Count > 0)
    {
        @*<div>
                <ul>
                    @foreach (var file in files)
                    {
                        <li><a class="btn oi oi-file"></a></li>
                        <li>@file.Name</li>
                        <li><a class="btn oi oi-file"></a></li>
                    }
                </ul>
            </div>*@

        <table class="table">
            <thead>
                <tr>
                    <th>File name</th>
                    <th>Type</th>
                    <th>Size</th>
                    <th>State</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var log in fileSentStateList)
                {
                    <tr>
                        <td>@files[log.Id].Name</td>
                        <td>@log.Type</td>
                        <td>@log.Size</td>
                        @if (log.SentState)
                        {
                            <td><a class="oi oi-check "></a></td>
                        }
                        else
                        {
                            <td><a class="oi oi-x "></a></td>
                        }
                        <td><a class="oi oi-file"></a></td>
                    </tr>
                }
            </tbody>
        </table>
    }
    @if (urls.Count > 0)
    {
        <button class="rightBtn btn" @onclick=ClearList>Delete all</button>
        <div style="width:10px;height:0px;"></div>
        <button class="rightBtn btn" @onclick=ShowLinksMethod>Show links</button>
        <button class="leftBtn btn" @onclick=Send>Send</button>
    }

    @if (urls.Count > 0 && HideLinksList)
    {
        foreach (var url in urls)
        {
            <br />
            <a href="@url" download>@url</a>
        }
    }
</div>



@code {

    public bool HideLinksList = false;
    IList<IBrowserFile> files;
    List<XmlToSend> fileSentStateList = new List<XmlToSend>();
    List<string> urls = new List<string>();
    string dropClass = string.Empty;
    const int maxFileSize = 100485760;
    private void HandleDragEnter()
    {
        dropClass = "dropAreaDrug";
    }
    private void HandleDragLeave()
    {
        dropClass = string.Empty;
    }
    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        dropClass = string.Empty;
        try
        {
            if (e.FileCount > 1)
            {
                files = e.GetMultipleFiles().ToList();
                urls.Clear();
                urls.AddRange(await SaveFiles((IReadOnlyList<IBrowserFile>)files));
                var count = 0;
                fileSentStateList.Clear();
                foreach (var file in files)
                {
                    var newFile = new XmlToSend(count, file.Name, false, GetReadableSize(file.Size), GetType(file.ContentType));
                    fileSentStateList.Add(newFile);
                    count = fileSentStateList.Count();
                }
            }
            else
            {
                files = e.GetMultipleFiles().ToList();
                files.Clear();
                files.Add(e.File);
                var url = await SaveFile(e.File);
                urls.Clear();
                urls.Add(url);
                var count = 0;
                fileSentStateList.Clear();
                foreach (var file in files)
                {
                    var newFile = new XmlToSend(count, file.Name, false, GetReadableSize(file.Size), GetType(file.ContentType));
                    fileSentStateList.Add(newFile);
                    count = fileSentStateList.Count();
                }
            }
            StateHasChanged();
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine(ex.Message);
            throw;
        }
    }
    private async Task<List<string>> SaveFiles(IReadOnlyList<IBrowserFile> files)
    {
        var list = new List<string>();
        var guid = Guid.NewGuid().ToString();
        foreach (var file in files)
        {
            var url = await SaveFile(file, guid);
            list.Add(url);
        }
        return list;
    }
    private async Task<string> SaveFile(IBrowserFile file, string guid = null)
    {
        if (guid == null)
        {
            guid = Guid.NewGuid().ToString();
        }
        var relativePath = Path.Combine("uploads", guid);
        var dirToSave = "C:\\KnxRepoerter";
        var di = new DirectoryInfo(dirToSave);
        if (!di.Exists)
        {
            di.Create();
        }
        var filePath = Path.Combine(dirToSave, file.Name);
        using (var stream = file.OpenReadStream(maxFileSize))
        {
            using (var mstream = new MemoryStream())
            {
                await stream.CopyToAsync(mstream);
                await File.WriteAllBytesAsync(filePath, mstream.ToArray());
            }
        }
        var url = Path.Combine(relativePath, file.Name).Replace("\\", "/");
        return url;
    }

    public async void ShowLinksMethod()
    {
        var newState = !HideLinksList;
        HideLinksList = newState;
        StateHasChanged();
    }
    public async void ClearList()
    {
        files.Clear();
        fileSentStateList.Clear();
        urls.Clear();
        StateHasChanged();
    }

    public string GetReadableSize(long size)
    {
        if (size < 1000)
        {
            return size + " B";
        }
        else if (size < 1000000)
        {
            return size / 1000 + " KB";
        }
        else
        {
            return size / 1000000 + " MB";
        }
    }

    public string GetType(string typeOfFile)
    {
        try
        {
            return typeOfFile.Substring(typeOfFile.LastIndexOf('/'), typeOfFile.Length);
        }
        catch(Exception e)
        {
            return typeOfFile;
        }
    }

    public async Task Send()
    {
        try
        {
            var count = 0;
            foreach(var file in files)
            {
                XmlDocument xmlDoc = new XmlDocument();

                using (var stream = file.OpenReadStream(maxFileSize))
                {
                    using (var mstream = new MemoryStream())
                    {
                        await stream.CopyToAsync(mstream);

                        xmlDoc.LoadXml(System.Text.Encoding.UTF8.GetString(mstream.ToArray()));
                    }
                }
                XmlFile objectXmlFile = new XmlFile();
                XmlNodeList tList = xmlDoc.GetElementsByTagName("Telegram");
                objectXmlFile = ApiService.PostXml(file.Name, xmlDoc, (int)tList.Count);
                StateHasChanged();
                await PostEncodedTelegram(objectXmlFile);
                fileSentStateList[count].SentState = true;
                StateHasChanged();
            }
        }
        catch(Exception e)
        {
        }
    }


    private async Task PostEncodedTelegram(XmlFile tosend)
    {
        try
        {
            var payload = JsonConvert.SerializeObject(tosend);
            payload = payload.Replace("\"Fid\":null,", "");

            var requestMessage = new HttpRequestMessage(HttpMethod.Post, "https://192.168.1.200:1200/api/XmlFiles/PostXmlFiles");

            requestMessage.Content = new StringContent(payload, Encoding.UTF8, "application/json");

            var responseMessage = await http.SendAsync(requestMessage);

            if (responseMessage.IsSuccessStatusCode)
            {
                var resultString = await responseMessage.Content.ReadAsStringAsync();
            }
            else
            {
                // Handle error result
                throw new Exception();
            }
        }
        catch (Exception e)
        {
            throw e;
        }
    }

}
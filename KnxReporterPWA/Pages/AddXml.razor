@page "/addxml"
@using Tewr.Blazor.FileReader;
@using System.IO;
@using System.Xml;
@using Models;
@using System.Collections.Concurrent;
@using System.Text;
@using System.Text.RegularExpressions;
@using Newtonsoft.Json;
@using System.IO;
@using Microsoft.AspNetCore.Hosting;

@inject IFileReaderService fileReaderService;
@inject NavigationManager NavigationManager;
@inject HttpClient http;


<h1>Add .xml file with KNX Telegrams</h1>

<div>
    <div class="dropArea @dropClass">
        <div class="centerElements">
            <div class="center">
                <img src="/Images/file_copy-black-18dp.svg" width="200" height="100" />
            </div>
            <br />
            <p class="text-center">Drag and drop xml here or click to open file dialogue</p>
        </div>
        <InputFile id="inputDrop"
                   OnChange="OnInputFileChange"
                   @ondragenter="HandleDragEnter"
                   @ondragleave="HandleDragLeave"
                   multiple />
    </div>
    <div class="invisible">
        <InputFile id="inputDefault"
                   OnChange="OnInputFileChange"
                   accept="xml" 
                   />
    </div>
    @if (files != null && files.Count > 1)
    {
        <div>
            <ul>
                @foreach (var file in files)
                {
                    <li>@file.Name</li>
                }
            </ul>
        </div>
    }
    @if (urls.Count > 0)
    {
        foreach (var url in urls)
        {
            <br />
            <a href="@url" download>@url</a>
        }
    }
</div>



@code {
    IReadOnlyList<IBrowserFile> files;
    List<string> urls = new List<string>();
    string dropClass = string.Empty;
    const int maxFileSize = 10485760;
    private void HandleDragEnter()
    {
        dropClass = "dropAreaDrug";
    }
    private void HandleDragLeave()
    {
        dropClass = string.Empty;
    }
    async Task OnInputFileChange(InputFileChangeEventArgs e)
    {
        dropClass = string.Empty;
        try
        {
            if (e.FileCount > 1)
            {
                files = e.GetMultipleFiles();
                urls.Clear();
                urls.AddRange(await SaveFiles(files));
            }
            else
            {
                files = null;
                var url = await SaveFile(e.File);
                urls.Clear();
                urls.Add(url);
            }
        }
        catch (Exception ex)
        {
            System.Diagnostics.Debug.WriteLine(ex.Message);
            throw;
        }
    }
    private async Task<List<string>> SaveFiles(IReadOnlyList<IBrowserFile> files)
    {
        var list = new List<string>();
        var guid = Guid.NewGuid().ToString();
        foreach (var file in files)
        {
            var url = await SaveFile(file, guid);
            list.Add(url);
        }
        return list;
    }
    private async Task<string> SaveFile(IBrowserFile file, string guid = null)
    {
        if (guid == null)
        {
            guid = Guid.NewGuid().ToString();
        }
        var relativePath = Path.Combine("uploads", guid);
        var dirToSave = "C:\\KnxRepoerter";
        var di = new DirectoryInfo(dirToSave);
        if (!di.Exists)
        {
            di.Create();
        }
        var filePath = Path.Combine(dirToSave, file.Name);
        using (var stream = file.OpenReadStream(maxFileSize))
        {
            using (var mstream = new MemoryStream())
            {
                await stream.CopyToAsync(mstream);
                await File.WriteAllBytesAsync(filePath, mstream.ToArray());
            }
        }
        var url = Path.Combine(relativePath, file.Name).Replace("\\", "/");
        return url;
    }
}
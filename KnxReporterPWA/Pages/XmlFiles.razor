@page "/xmlfiles"
@using System.Net.Http
@using System.Net.Http.Headers;
@using Models;

@inject HttpClient Http

<a><h5>XML files at database</h5><br /> page @pageCounter of @totalPageCounter total</a>
<button class="btn" @onclick=Prev disabled=@ShowButton>Previous</button>
<button class="btn" @onclick=Next disabled=@ShowButton>Next</button>
<button class="rightBtn btn" @onclick=All>All</button>


@if (logItems == null)
{
    <p><em>Loading...</em></p>
    <div class="loadingProgressBar">
        <img id="loading" src="/Images/loading_file.gif" width="300px" />
    </div>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Fid</th>
                <th>Filename</th>
                <th>XML Data</th>
                <th>Processed</th>
                <th>Telegrams</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var log in displayLogItems)
            {
                <tr>
                    <td>@log.Fid</td>
                    <td>@log.FileName</td>
                    <td><a class="oi oi-file"/></td>
                    <td>@log.IsProcessed</td>
                    <td>@log.TelegramsCount</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    public bool ShowProgressBar = false;
    public bool ShowButton = true;
    private Xmlfile[] logItems;
    private Xmlfile[] displayLogItems = new List<Xmlfile>().ToArray();
    private int pageCounter = 0;
    private int totalPageCounter = 0;
    private string exMsg = "";

    private const string URL = "https://192.168.1.200:1200/api/XmlFiles/GetXmlFiles/";
    private string urlParameters = "";

    protected override async Task OnInitializedAsync()
    {
        Load().Wait();
    }

    async Task Prev()
    {
        if (pageCounter > 0)
        {
            var temp = pageCounter - 1;
            pageCounter = temp;
            displayLogItems = logItems.Skip(pageCounter * 10).Take(10).ToArray();
            StateHasChanged();
        }
    }

    async Task All()
    {
        displayLogItems = logItems.ToArray();
    }

    async Task Next()
    {
        if (pageCounter < totalPageCounter)
        {
            var temp = pageCounter + 1;
            pageCounter = temp;
            displayLogItems = logItems.Skip(pageCounter * 10).Take(10).ToArray();
            StateHasChanged();
        }
    }

    async void BlockButton(bool state)
    {
        ShowButton = state;
        StateHasChanged();
    }
}

@functions{
    private async Task Load()
    {

        try
        {
            var temp = await Http.GetFromJsonAsync<IEnumerable<Xmlfile>>(URL);
            logItems = temp.ToArray();

            totalPageCounter = logItems.Count() / 10;
            displayLogItems = logItems.Take(10).ToArray();
            if (totalPageCounter > 1)
            {
                BlockButton(false);
            }
            else
            {
                BlockButton(true);
            }
        }
        catch (Exception ex)
        {
            throw;
        }
        StateHasChanged();
    }
}

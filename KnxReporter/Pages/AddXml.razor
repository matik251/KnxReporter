@page "/counter"
@using Tewr.Blazor.FileReader
@using System.IO;
@using System.Xml;
@using Models;
@using System.Collections.Concurrent;
@using System.Text;
@using System.Text.RegularExpressions;
@using Newtonsoft.Json;

@inject IFileReaderService fileReaderService;
@inject ApiService apiService


<h1>Add .xml file with KNX Telegrams</h1>

@*<p>Current count: @currentCount</p>*@

@*<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>*@

<input type="file" @ref=inputTypeFileElement />
<a></a>
<button @onclick=ReadFile>Read file</button>
<button @onclick=AnalyzeEmiLengths>Analyze Emi Structure</button>

<h3>@currentCount</h3>

<Grid Items="DgTelegramsList" class="table table-bordered" RowClass='(row, index) => row.RawDataLength > 24 ? "table-success" : ""'>
    <GridColumn TRowData="Telegram" Expression="c => c.TID" />
    <GridColumn TRowData="Telegram" Expression="c => c.Timestamp" Format="d" />
    <GridColumn TRowData="Telegram" Expression="c => c.Service" />
    <GridColumn TRowData="Telegram" Expression="c => c.FrameFormat" />
    <GridColumn TRowData="Telegram" Title="Raw Data">@context.RawData</GridColumn>
</Grid>

<h3>@doc</h3>
<button disabled=@ShowButton @onclick="SendXml">Send to server</button>


@code {

    public bool ShowButton = true;
    private long currentCount = 0;
    private ElementReference inputTypeFileElement;
    private string doc = "";

    public ConcurrentBag<Telegram> TelegramsList = new ConcurrentBag<Telegram>();
    public List<Telegram> DgTelegramsList = new List<Telegram>();

    public async Task ReadFileTelegrams()
    {
        currentCount = 0;
        TelegramsList.Clear();
        DgTelegramsList.Clear();
        foreach (var file in await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync())
        {
            XmlDocument xmlDoc = new XmlDocument();
            using (MemoryStream memStream = await file.CreateMemoryStreamAsync())
            {
                xmlDoc.Load(memStream);
            }
            XmlNodeList tList = xmlDoc.GetElementsByTagName("Telegram");
            var tListGenercic = tList.Cast<XmlElement>();
            Parallel.ForEach(tListGenercic, (t) =>
            {
                var telegram = new Telegram();
                XmlElement temp = (XmlElement)t;

                telegram.TimestampS = temp.GetAttributeNode("Timestamp").Value;
                var tempDate = DateTime.Parse(telegram.TimestampS);
                telegram.Timestamp = tempDate.AddHours(2);

                telegram.Service = temp.GetAttributeNode("Service").Value;
                telegram.FrameFormat = temp.GetAttributeNode("FrameFormat").Value;
                telegram.RawData = temp.GetAttributeNode("RawData").Value;
                telegram.RawDataLength = temp.GetAttributeNode("RawData").Value.Length;

                telegram.TID = TelegramsList.Count;
                currentCount = telegram.TID;
                TelegramsList.Add(telegram);
            });

            doc = "File loaded succesfully!";
        }
        DgTelegramsList = new List<Telegram>((from t in TelegramsList
                                              orderby t.TID ascending
                                              select t).Take(10));
    }

    public async Task ReadFile()
    {
        currentCount = 0;
        TelegramsList.Clear();
        DgTelegramsList.Clear();

        foreach (var file in await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync())
        {
            XmlDocument xmlDoc = new XmlDocument();
            using (MemoryStream memStream = await file.CreateMemoryStreamAsync())
            {
                xmlDoc.Load(memStream);
            }
            XmlNodeList tList = xmlDoc.GetElementsByTagName("Telegram");
            currentCount = tList.Count;
            var tListGenercic = tList.Cast<XmlElement>();
            var maxIterations = (tListGenercic.Count() > 10) ? 10 : tList.Count;

            for (int i = 0; i < maxIterations; i++)
            {
                var t = tList[i];
                var telegram = new Telegram();
                XmlElement temp = (XmlElement)t;

                telegram.TimestampS = temp.GetAttributeNode("Timestamp").Value;
                var tempDate = DateTime.Parse(telegram.TimestampS);
                telegram.Timestamp = tempDate.AddHours(2);

                telegram.Service = temp.GetAttributeNode("Service").Value;
                telegram.FrameFormat = temp.GetAttributeNode("FrameFormat").Value;
                telegram.RawData = temp.GetAttributeNode("RawData").Value;
                telegram.RawDataLength = temp.GetAttributeNode("RawData").Value.Length;

                telegram.TID = TelegramsList.Count;
                TelegramsList.Add(telegram);
            }

        }
        DgTelegramsList = new List<Telegram>((from t in TelegramsList
                                              orderby t.TID ascending
                                              select t).Take(10));
        doc = "File loaded succesfully!";
        BlockButton(false);
    }




    public async Task AnalyzeEmiLengths()
    {
        var emiLengths = "";
        var lenghtResultsTable = new ConcurrentDictionary<int, int>();
        foreach (var file in await fileReaderService.CreateReference(inputTypeFileElement).EnumerateFilesAsync())
        {
            currentCount = 0;
            XmlDocument xmlDoc = new XmlDocument();
            using (MemoryStream memStream = await file.CreateMemoryStreamAsync())
            {
                xmlDoc.Load(memStream);
            }
            XmlNodeList tList = xmlDoc.GetElementsByTagName("Telegram");
            currentCount = tList.Count;
            var tListGenercic = tList.Cast<XmlElement>();
            var maxIterations = (tListGenercic.Count() > 10) ? 10 : tList.Count;

            var tempLength = 0;
            Parallel.ForEach(tListGenercic, (t) =>
            {
                XmlElement temp = (XmlElement)t;

                tempLength = temp.GetAttributeNode("RawData").Value.Length;
                if (lenghtResultsTable.ContainsKey(tempLength))
                {
                    int tempValue = 0;
                    lenghtResultsTable.TryGetValue(tempLength, out tempValue);
                    lenghtResultsTable.TryUpdate(tempLength, tempValue + 1, tempValue);
                }
                else
                {
                    lenghtResultsTable.TryAdd(tempLength, 1);
                }
                currentCount = currentCount++;
            });
            foreach (var ent in lenghtResultsTable)
            {
                doc += "\n\r" + ent.Key.ToString() + " : " + ent.Value.ToString() + ",";
            }
        }

        BlockButton(true);
    }

    private void IncrementCount()
    {
        currentCount++;
    }
    async void BlockButton(bool state)
    {
        ShowButton = state;
        StateHasChanged();
    }

    async void SendXml()
    {

    }


}


}
